// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Omnicx.API.SDK.Recomendation
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Models operations.
    /// </summary>
    public partial interface IModels
    {
        /// <summary>
        /// Lists all the models
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Model>>> GetModelsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Trains a new model
        /// </summary>
        /// <param name='modelParameters'>
        /// The new model parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Model>> TrainNewModelWithHttpMessagesAsync(ModelParameters modelParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a model by id
        /// </summary>
        /// <param name='modelId'>
        /// The model id to retrieve
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Model>> GetModelWithHttpMessagesAsync(Guid modelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing model by id
        /// </summary>
        /// <param name='modelId'>
        /// The model to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteModelWithHttpMessagesAsync(Guid modelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the default model.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Model>> GetDefaultModelWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sets a model as the default model
        /// </summary>
        /// <param name='modelId'>
        /// The model id to set as default
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetDefaultModelWithHttpMessagesAsync(Guid modelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get recommendations using the default model
        /// </summary>
        /// <param name='itemId'>
        /// Item id to get recommendations for
        /// </param>
        /// <param name='recommendationCount'>
        /// The number of requested recommendations
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RecommendationResult>>> GetItemRecommendationsFromDefaultModelWithHttpMessagesAsync(string itemId, int? recommendationCount = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get recommendations using the default model
        /// </summary>
        /// <param name='usageEvents'>
        /// The usage events to get recommendations for
        /// </param>
        /// <param name='userId'>
        /// An optional id of the user to provide recommendations for. Any
        /// stored usage events associated with this user will be considered
        /// when getting recommendations
        /// </param>
        /// <param name='recommendationCount'>
        /// The number of requested recommendations
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RecommendationResult>>> GetPersonalizedRecommendationsFromDefaultModelWithHttpMessagesAsync(IList<UsageEvent> usageEvents, string userId = default(string), int? recommendationCount = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get recommendations using the requested model
        /// </summary>
        /// <param name='modelId'>
        /// The model id to use when scoring
        /// </param>
        /// <param name='itemId'>
        /// Item id to get recommendations for
        /// </param>
        /// <param name='recommendationCount'>
        /// The number of requested recommendations
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RecommendationResult>>> GetItemRecommendationsWithHttpMessagesAsync(Guid modelId, string itemId, int? recommendationCount = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get recommendations using the requested model
        /// </summary>
        /// <param name='modelId'>
        /// The model id to use when scoring
        /// </param>
        /// <param name='usageEvents'>
        /// The usage events to get recommendations for
        /// </param>
        /// <param name='userId'>
        /// An optional id of the user to provide recommendations for. Any
        /// stored usage events associated with this user will be considered
        /// when getting recommendations
        /// </param>
        /// <param name='recommendationCount'>
        /// The number of requested recommendations
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RecommendationResult>>> GetPersonalizedRecommendationsWithHttpMessagesAsync(Guid modelId, IList<UsageEvent> usageEvents, string userId = default(string), int? recommendationCount = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
