// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Omnicx.API.SDK.Recomendation.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents the parameters of a model
    /// </summary>
    public partial class ModelParameters
    {
        /// <summary>
        /// Initializes a new instance of the ModelParameters class.
        /// </summary>
        public ModelParameters() { }

        /// <summary>
        /// Initializes a new instance of the ModelParameters class.
        /// </summary>
        public ModelParameters(string usageRelativePath, string description = default(string), string blobContainerName = default(string), string catalogFileRelativePath = default(string), string evaluationUsageRelativePath = default(string), int? supportThreshold = default(int?), CooccurrenceUnit? cooccurrenceUnit = default(CooccurrenceUnit?), SimilarityFunction? similarityFunction = default(SimilarityFunction?), bool? enableColdItemPlacement = default(bool?), bool? enableColdToColdRecommendations = default(bool?), bool? enableUserAffinity = default(bool?), bool? enableUserToItemRecommendations = default(bool?), bool? allowSeedItemsInRecommendations = default(bool?), bool? enableBackfilling = default(bool?), int? decayPeriodInDays = default(int?))
        {
            Description = description;
            BlobContainerName = blobContainerName;
            CatalogFileRelativePath = catalogFileRelativePath;
            UsageRelativePath = usageRelativePath;
            EvaluationUsageRelativePath = evaluationUsageRelativePath;
            SupportThreshold = supportThreshold;
            CooccurrenceUnit = cooccurrenceUnit;
            SimilarityFunction = similarityFunction;
            EnableColdItemPlacement = enableColdItemPlacement;
            EnableColdToColdRecommendations = enableColdToColdRecommendations;
            EnableUserAffinity = enableUserAffinity;
            EnableUserToItemRecommendations = enableUserToItemRecommendations;
            AllowSeedItemsInRecommendations = allowSeedItemsInRecommendations;
            EnableBackfilling = enableBackfilling;
            DecayPeriodInDays = decayPeriodInDays;
        }

        /// <summary>
        /// Model description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The name of a blob container in the default storage account used
        /// by the service that stores the modeling files.
        /// </summary>
        [JsonProperty(PropertyName = "blobContainerName")]
        public string BlobContainerName { get; set; }

        /// <summary>
        /// Catalog file path relative to the container.
        /// </summary>
        [JsonProperty(PropertyName = "catalogFileRelativePath")]
        public string CatalogFileRelativePath { get; set; }

        /// <summary>
        /// Usage file\\\\folder path relative to the container.
        /// </summary>
        [JsonProperty(PropertyName = "usageRelativePath")]
        public string UsageRelativePath { get; set; }

        /// <summary>
        /// Optional. Evaluation file\\\\folder path relative to the container.
        /// </summary>
        [JsonProperty(PropertyName = "evaluationUsageRelativePath")]
        public string EvaluationUsageRelativePath { get; set; }

        /// <summary>
        /// How conservative the model is. Number of co-occurrences of items
        /// to be considered for modeling.
        /// </summary>
        [JsonProperty(PropertyName = "supportThreshold")]
        public int? SupportThreshold { get; set; }

        /// <summary>
        /// Indicates how to group usage events before counting
        /// co-occurrences.
        /// A 'User' co-occurrence unit will consider all items purchased by
        /// the same user as occurring together in the same session.
        /// A 'Timestamp' co-occurrence unit will consider all items purchased
        /// by the same user in the same time as occurring together in the
        /// same session. Possible values include: 'User', 'Timestamp'
        /// </summary>
        [JsonProperty(PropertyName = "cooccurrenceUnit")]
        public CooccurrenceUnit? CooccurrenceUnit { get; set; }

        /// <summary>
        /// Defines the similarity function to be used by the model. Lift
        /// favors serendipity,
        /// Co-occurrence favors predictability, and Jaccard is a nice
        /// compromise between the two. Possible values include: 'Jaccard',
        /// 'Cooccurrence', 'Lift'
        /// </summary>
        [JsonProperty(PropertyName = "similarityFunction")]
        public SimilarityFunction? SimilarityFunction { get; set; }

        /// <summary>
        /// Indicates if the recommendation should also push cold items via
        /// feature similarity.
        /// </summary>
        [JsonProperty(PropertyName = "enableColdItemPlacement")]
        public bool? EnableColdItemPlacement { get; set; }

        /// <summary>
        /// Indicates whether the similarity between pairs of cold items
        /// (catalog items without usage) should be computed.
        /// If set to false, only similarity between cold and warm item will
        /// be computed, using catalog item features.
        /// Note that this configuration is only relevant when
        /// enableColdItemPlacement is set to true.
        /// </summary>
        [JsonProperty(PropertyName = "enableColdToColdRecommendations")]
        public bool? EnableColdToColdRecommendations { get; set; }

        /// <summary>
        /// For user-to-item recommendations, it defines whether the event
        /// type and the time of the event should be considered as
        /// input into the scoring.
        /// </summary>
        [JsonProperty(PropertyName = "enableUserAffinity")]
        public bool? EnableUserAffinity { get; set; }

        /// <summary>
        /// Enables user to item recommendations by storing the usage events
        /// per user and using it for recommendations.
        /// Setting this to true will impact the performance of the training
        /// process.
        /// </summary>
        [JsonProperty(PropertyName = "enableUserToItemRecommendations")]
        public bool? EnableUserToItemRecommendations { get; set; }

        /// <summary>
        /// Allow seed items (input items to the recommendation request) to be
        /// returned as part of the recommendation results.
        /// </summary>
        [JsonProperty(PropertyName = "allowSeedItemsInRecommendations")]
        public bool? AllowSeedItemsInRecommendations { get; set; }

        /// <summary>
        /// Backfill recommendations with popular items.
        /// </summary>
        [JsonProperty(PropertyName = "enableBackfilling")]
        public bool? EnableBackfilling { get; set; }

        /// <summary>
        /// The decay period in days. The strength of the signal for events
        /// that are that many days old will be half that of the most recent
        /// events.
        /// </summary>
        [JsonProperty(PropertyName = "decayPeriodInDays")]
        public int? DecayPeriodInDays { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (UsageRelativePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UsageRelativePath");
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 256);
                }
                if (this.Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (this.SupportThreshold > 50)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "SupportThreshold", 50);
            }
            if (this.SupportThreshold < 3)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SupportThreshold", 3);
            }
            if (this.DecayPeriodInDays > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DecayPeriodInDays", 2147483647);
            }
            if (this.DecayPeriodInDays < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DecayPeriodInDays", 1);
            }
        }
    }
}
