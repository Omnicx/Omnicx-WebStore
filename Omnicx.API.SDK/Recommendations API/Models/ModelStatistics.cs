// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Omnicx.API.SDK.Recomendation.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// The model statistics gathered during model training
    /// </summary>
    public partial class ModelStatistics
    {
        /// <summary>
        /// Initializes a new instance of the ModelStatistics class.
        /// </summary>
        public ModelStatistics() { }

        /// <summary>
        /// Initializes a new instance of the ModelStatistics class.
        /// </summary>
        public ModelStatistics(string totalDuration = default(string), string trainingDuration = default(string), string storingUserHistoryDuration = default(string), ParsingReport catalogParsing = default(ParsingReport), ParsingReport usageEventsParsing = default(ParsingReport), int? numberOfCatalogItems = default(int?), int? numberOfUsageItems = default(int?), int? numberOfUsers = default(int?), double? catalogCoverage = default(double?), ModelEvaluationResult evaluation = default(ModelEvaluationResult), IDictionary<string, double?> catalogFeatureWeights = default(IDictionary<string, double?>))
        {
            TotalDuration = totalDuration;
            TrainingDuration = trainingDuration;
            StoringUserHistoryDuration = storingUserHistoryDuration;
            CatalogParsing = catalogParsing;
            UsageEventsParsing = usageEventsParsing;
            NumberOfCatalogItems = numberOfCatalogItems;
            NumberOfUsageItems = numberOfUsageItems;
            NumberOfUsers = numberOfUsers;
            CatalogCoverage = catalogCoverage;
            Evaluation = evaluation;
            CatalogFeatureWeights = catalogFeatureWeights;
        }

        /// <summary>
        /// The total duration
        /// </summary>
        [JsonProperty(PropertyName = "totalDuration")]
        public string TotalDuration { get; set; }

        /// <summary>
        /// The core training duration
        /// </summary>
        [JsonProperty(PropertyName = "trainingDuration")]
        public string TrainingDuration { get; set; }

        /// <summary>
        /// The duration of storing usage events per user later to be used for
        /// user recommendations
        /// </summary>
        [JsonProperty(PropertyName = "storingUserHistoryDuration")]
        public string StoringUserHistoryDuration { get; set; }

        /// <summary>
        /// The catalog file parsing report
        /// </summary>
        [JsonProperty(PropertyName = "catalogParsing")]
        public ParsingReport CatalogParsing { get; set; }

        /// <summary>
        /// The usage events files parsing report
        /// </summary>
        [JsonProperty(PropertyName = "usageEventsParsing")]
        public ParsingReport UsageEventsParsing { get; set; }

        /// <summary>
        /// The number of items found in catalog
        /// </summary>
        [JsonProperty(PropertyName = "numberOfCatalogItems")]
        public int? NumberOfCatalogItems { get; set; }

        /// <summary>
        /// The number of valid (which are present in catalog if provided)
        /// unique items found in usage files
        /// </summary>
        [JsonProperty(PropertyName = "numberOfUsageItems")]
        public int? NumberOfUsageItems { get; set; }

        /// <summary>
        /// The number of unique users found in usage files
        /// </summary>
        [JsonProperty(PropertyName = "numberOfUsers")]
        public int? NumberOfUsers { get; set; }

        /// <summary>
        /// The ratio of unique items found in usage files and total items in
        /// catalog
        /// </summary>
        [JsonProperty(PropertyName = "catalogCoverage")]
        public double? CatalogCoverage { get; set; }

        /// <summary>
        /// The model evaluation report
        /// </summary>
        [JsonProperty(PropertyName = "evaluation")]
        public ModelEvaluationResult Evaluation { get; set; }

        /// <summary>
        /// The calculated catalog feature weights
        /// </summary>
        [JsonProperty(PropertyName = "catalogFeatureWeights")]
        public IDictionary<string, double?> CatalogFeatureWeights { get; set; }

    }
}
