@{
/*
    Name: Category listing
    Purpose: Category List View
    Structure: /Views/Category/CategoryProducts.cshtml
    Contains (Partial Views Used):
        a-/Views/Shared/_Layout.cshtml.cshtml           (For base Structure)
        b-/Views/Shared/_BreadCrumb.cshtml                      (Dynamic Breadcrumb view)
        c-/Views/search/_SearchResultProducts.cshtml    (Product listing of selected category)

    Contained In (Where we Use this View):
    */
}
@using Microsoft.Web.Mvc
@using Omnicx.WebStore.Core.Controllers
@using Omnicx.WebStore.Framework.Helpers
@using Omnicx.WebStore.Models.Enums
@using Omnicx.API.SDK.Helpers
@using Omnicx.WebStore.Models.Catalog
@inherits Omnicx.WebStore.Core.Services.Infrastructure.CustomBaseViewPage<Omnicx.WebStore.Models.Catalog.CategoryModel>
@{
    ViewBag.Title = @LT("ProductDetail.Label.Search" , "Search");
    Layout = "~/Views/Shared/_Layout.cshtml";
    CategoryModel metaInfo = (CategoryModel)ViewBag.MetaInfo;
    Html.AddDataLayer(DataLayerObjectType.CategoryDetail, Model);
}
@if (metaInfo != null)
{

    Html.AddTitleParts(metaInfo.Name);
    Html.AddMetaTitle(metaInfo.MetaTitle);
    Html.AddMetaDescriptionParts(metaInfo.MetaDescription);
    Html.AddMetaKeywordsParts(metaInfo.MetaKeywords);
    Html.AddCanonicalUrl(metaInfo.CanonicalTags);
}
<div class="col-md-12 col-xs-12 no-padding">
    <ul class="breadcrumb">
        <li><a href="/">@LT("ProductListing.Breadcrumb.Home", "Home")</a></li>       
        @if (Model.BreadCrumbs != null)
        {
            var catBreadCrumb = Model.BreadCrumbs.FirstOrDefault(x => x.SlugType == EntitySlugTypes.Category.ToString());
            if (catBreadCrumb != null && catBreadCrumb.Slug != null)
            {
                @Html.Partial("~/Views/Shared/_BreadCrumb.cshtml", catBreadCrumb.Slug);
            }
        }
        <li><a href="#"></a>@Model.Name</li>
    </ul>
</div>

@Html.Partial("~/Views/search/_SearchResultProducts.cshtml" , Model.ProductList)

@section scripts{
    <script>
        var searchProductUrl = '@(Html.BuildUrlFromExpression<SearchController>(c => c.SearchProducts(null)))';
        var productUrl = '@(Html.BuildUrlFromExpression<ProductController>(c => c.ProductDetails("")))';
        var addToWishlistUrl = '@(Html.BuildUrlFromExpression<AccountController>(c => c.AddProductToWishlist(null)))';     
        var getWishlist = '@(Html.BuildUrlFromExpression<AccountController>(c => c.GetWishlist()))'; 
        window.app.constant('productConfig',{
            searchProductUrl:searchProductUrl,
            productUrl : productUrl,
            addToWishlistUrl : addToWishlistUrl,           
            getWishlist:getWishlist
        });
        window.app.constant('model', @Html.JsonFor(Model));
    </script>
}